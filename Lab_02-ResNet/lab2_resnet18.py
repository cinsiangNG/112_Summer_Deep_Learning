# -*- coding: utf-8 -*-
"""Lab2_ResNet18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uqs707vLsqvo0J-fdk0dLoujYZyxpmwR
"""

import torch
import numpy as np
import torch.nn as nn
import torch.nn.functional as F
import torchvision
from torchvision import datasets, transforms, models
import torch.optim as optim
import matplotlib.pyplot as plt
import torch.utils.data as data
import torchvision.utils as utils
import os

#dataset path
data_path_train = "./data/training"
data_path_test  = "./data/testing"

# data transform, you can add different transform methods and resize image to any size
img_size = 224
transform = transforms.Compose([
                       transforms.RandomRotation(degrees=20),
                       transforms.Resize((img_size,img_size)),
                       transforms.ToTensor(),
                       transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
                       ])

#build dataset
dataset = datasets.ImageFolder(root=data_path_train,transform=transform)

# spilt your data into train and val
TOTAL_SIZE = len(dataset)
ratio = 0.8
train_len = round(TOTAL_SIZE * ratio)
valid_len = round(TOTAL_SIZE * (1-ratio))
train_dataset, val_dataset = torch.utils.data.random_split(dataset, [train_len, valid_len])

#build dataloader
train_data_loader = data.DataLoader(train_dataset, batch_size=8, shuffle=True,  num_workers=1)
val_data_loader   = data.DataLoader(  val_dataset, batch_size=8, shuffle=True,  num_workers=1)

#check dataset
print(dataset)
print(dataset.class_to_idx)


# using gpu if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")


class BasicBlock(nn.Module):
    def __init__(self, ch_in, ch_out, stride=1):
        super(BasicBlock, self).__init__()
        self.conv1 = nn.Conv2d(ch_in, ch_out, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1   = nn.BatchNorm2d(ch_out)
        self.relu  = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(ch_out, ch_out, kernel_size=3, stride=1, padding=1)
        self.bn2   = nn.BatchNorm2d(ch_out)

        if stride != 1 or ch_in != ch_out:
            self.downsample = nn.Sequential(
                nn.Conv2d(ch_in, ch_out, kernel_size=1, stride=stride),
                nn.BatchNorm2d(ch_out)
            )
        else:
            self.downsample = nn.Sequential()


    def forward(self, inputs):
        x = self.relu(self.bn1(self.conv1(inputs)))
        x = self.bn2(self.conv2(x))
        inputs = self.downsample(inputs)
        x = F.relu(x+inputs)
        return x


class ResNet18(nn.Module):
    def __init__(self):
        super(ResNet18, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1   = nn.BatchNorm2d(64)
        self.relu  = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)

        self.layer1 = self.build_layer( 64,  64, 2, 1)
        self.layer2 = self.build_layer( 64, 128, 2, 2)
        self.layer3 = self.build_layer(128, 256, 2, 2)
        self.layer4 = self.build_layer(256, 512, 2, 2)

        self.avgpool = nn.AdaptiveAvgPool2d(output_size=(1,1))
        self.fc = nn.Linear(512, 1000, bias=True)

    def forward(self, x):
        x = self.maxpool(self.relu(self.bn1(self.conv1(x))))

        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = self.avgpool(x).view(x.size(0), -1)
        x = self.fc(x)

        return x


    def build_layer(self, ch_in, ch_out, num_Block, stride=1):
        layers = []
        layers.append(BasicBlock(ch_in, ch_out, stride))

        for _ in range(1, num_Block):
            layers.append(BasicBlock(ch_out, ch_out, stride=1))

        return nn.Sequential(*layers)



model = ResNet18()

## model = RN18(ResBlock)

####################  implement your optimizer ###################################
## you can use any training methods if you want (ex:lr decay, weight decay.....)
learning_rate = 0.0005
optimizer = optim.SGD(model.parameters(), lr=learning_rate, weight_decay=1e-5, momentum=0.9)
criterion = nn.CrossEntropyLoss()
epochs    = 50


# start training
model.to(device=device)
acc_best = 50.0

#train function
def train(model, criterion, optimizer):
    model.to(device) ## changed
    model.train()
    total_loss    = 0.0
    total_correct = 0

    # Iterate over data
    for inputs, labels in train_data_loader:
        inputs = inputs.to(device)
        labels = labels.to(device)

        # zero the parameter gradients
        optimizer.zero_grad()

        # forward
        outputs  = model(inputs)
        _, preds = torch.max(outputs, 1)
        loss = criterion(outputs, labels)

        # backward + optimize
        loss.backward()
        optimizer.step()

        # statistics
        total_loss    += loss.item()
        total_correct += torch.sum(preds == labels.data)

    avg_loss = total_loss / len(train_data_loader)
    accuracy = total_correct.double() / len(train_dataset) * 100

    print('Training Accuracy: {:.4f}% Training Loss: {:.4f}'.format(accuracy, avg_loss))
    return

#validation function
def valid(model, criterion):
    model.to(device) ## changed
    model.eval()
    total_loss    = 0.0
    total_correct = 0

    # Iterate over data
    for inputs, labels in val_data_loader:
        inputs = inputs.to(device)
        labels = labels.to(device)

        # forward
        outputs  = model(inputs)
        _, preds = torch.max(outputs, 1)
        loss = criterion(outputs, labels)

        # statistics
        total_loss    += loss.item()
        total_correct += torch.sum(preds == labels.data)

    avg_loss = total_loss / len(val_data_loader)
    accuracy = total_correct.double() / len(val_dataset) * 100

    print('Validation Accuracy: {:.4f}% Validation Loss: {:.4f}'.format(accuracy, avg_loss))
    return accuracy


print('--------------start training--------------')
for epoch in range(1, epochs+1):

    print('epoch:', epoch)
    train(model, criterion, optimizer)
    accuracy = valid(model, criterion)

    if accuracy > acc_best:
        acc_best = accuracy
        print("model saved")
        # save the model
        torch.save(model, "model.pth")

